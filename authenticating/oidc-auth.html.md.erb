---
title: Configuring OIDC Authentication
owner: Concourse
---

<strong><%= modified_date %></strong>

This topic describes how to configure your team's authentication using OIDC Authentication.

## <a id="overview"></a> Overview
Continuous integration servers often contain many secrets that let them access source code and deploy apps.
It is important that those secrets remain well guarded.
Concourse provides options for both authentication and authorization to give you control over who can access your server and how much they can see.

Any number of the following providers can be enabled at any one time.
Users are given a choice when logging in as to which one they want to use.

<p class="note"><strong>Note:</strong>
If you access your Concourse server over the public internet, then consider using TLS to secure your connection to the web node.
</p>

Configuring team authentication in Concourse is done in two parts:

1. Configure the allowed authentication providers in the deployment manifest.
See [Configure Authentication Providers](#configuring) below.
2. Add users and groups to Concourse teams using `fly set-team`.
See [Add Users and Groups to Teams](#adding) below.

## <a id="configuring"></a> Configure Authentication Providers

<%= partial 'configure-auth-providers' %>

### <a id="config-oidc"></a> OIDC Authentication

If your authentication provider follows the OIDC specification, then use this provider.
Unlike the OAuth provider, you do not need to provide `auth-url`, `token-url`, and `userinfo-url`.
Instead, you can provide an `issuer-url`, and the system queries the `.well-known/openid-configuration` endpoint to discover the information it needs.

To add the OIDC authentication provider, do the following:

1. Create a client with your OIDC provider.
<br><br>
The callback URL is the external URL of your Concourse server with `/sky/issuer/callback appended`.
For example, Concourse's own CI server's callback URL is `https://ci.concourse-ci.org/sky/issuer/callback`.


1. Configure the client.
To configure the generic OIDC, fill in the `generic_oidc` fields in the `atc` job of the manifest.
For more information about these fields, see [generic_oidc](https://bosh.io/jobs/web?source=github.com/concourse/concourse-bosh-release&version=5.2.0#p%3dgeneric_oidc) in the BOSH documentation.

### <a id="config-main"></a> The Main Team

<%= partial 'main-team' %>


## <a id="adding"></a>Add Users and Groups to Teams

<%= partial 'add-users-and-groups' %>


### <a id="add-oidc"></a> OIDC Users and Groups
Team members can configure users and groups from a generic OIDC provider.
This is very similar to the OAuth connector.
The main difference is that OIDC providers must follow the OIDC specification,
while generic OAuth providers can be a little more flexible.

You can only configure groups if the authentication provider exposes this information in the contents of the userinfo endpoint.
You can configure which claim points to the groups information by specifying the `groups-key` at startup.

* Use `--oidc-user=USERNAME` to authorize an individual user.
* Use `--oidc-group=GROUP-NAME` to authorize anyone from the group.

For example:

<pre class="code">
$ fly set-team -n my-team \
    --oidc-user my-username \
    --oidc-group my-group
</pre>

### <a id="team-config"></a> Team Configuration Details

<%= partial 'team-config' %>

The output is similar to the following:
<pre class="terminal">
<strong>name</strong>     <strong>users</strong>          <strong>groups</strong>
main     oidc:User      oidc:Group
</pre>

## <a id="user-roles-and-permissions"></a> Set User Roles and Permissions

<%= partial 'set-user-roles-and-perms' %>
