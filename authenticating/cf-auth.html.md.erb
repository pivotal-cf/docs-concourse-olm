---
title: Configuring Cloud Foundry Authentication
owner: Concourse
---

<strong><%= modified_date %></strong>

This topic describes how to configure your team's authentication using Cloud Foundry Authentication.

## <a id="overview"></a> Overview
Continuous integration servers often contain many secrets that let them access source code and deploy apps.
It is important that those secrets remain well guarded.
Concourse provides options for both authentication and authorization to give you control over who can access your server and how much they can see.

Any number of the following providers can be enabled at any one time.
Users are given a choice when logging in as to which one they want to use.

<p class="note"><strong>Note:</strong>
If you access your Concourse server over the public internet, then consider using TLS to secure your connection to the web node.
</p>

Configuring team authentication in Concourse is done in two parts:

1. Configure the allowed authentication providers in the deployment manifest.
See [Configure Authentication Providers](#configuring) below.
2. Add users and groups to Concourse teams using `fly set-team`.
See [Add Users and Groups to Teams](#adding) below.


## <a id="configuring"></a> Configure Authentication Providers

<%= partial 'configure-auth-providers' %>

### <a id="config-cf"></a> Cloud Foundry Authentication

Operators can use Cloud Foundry Authentication (CF Auth) to authenticate users
against a Cloud Foundry deployment, using the User Account and Authentication (UAA) server.

To authenticate users, do the following:

1. Create a client for Concourse in UAA.<br><br>
The callback URL is the external URL of your Concourse server with `/sky/issuer/callback` appended.
For example, the callback URL for Concourse's CI server is `https://ci.concourse-ci.org/sky/issuer/callback`.
<br><br>
The client should look something like this, under `uaa.clients`:

    <pre class="terminal">
    concourse:
      id: MY-CLIENT-ID
      secret: MY-CLIENT-SECRET
      scope: openid,cloud_controller.read
      authorized-grant-types: "authorization_code,refresh_token"
      access-token-validity: 3600
      refresh-token-validity: 3600
      redirect-uri: https://concourse.example.com/sky/issuer/callback
    </pre>


2. Configure the `atc` job in the Concourse manifest with the Cloud Foundry client details:
<ul>
  <li>
    You are given a Client ID and a Client Secret for your new app.
    Supply this information in the `client_id` and `client_secret` fields.
  </li><br>
  <li>Configure your base API URL for CF in the `api_url` field.</li>
</ul>
  For more information about these fields, see
  [cf_auth](https://bosh.io/jobs/web?source=github.com/concourse/concourse-bosh-release&version=5.2.0#p%3dcf_auth.api_url)
  in the BOSH documentation.

### <a id="config-main"></a> The Main Team
By default, Concourse comes with a single team called `main`.
The `main` team is an admin team.
This means it can create and update other teams.
Currently there is no way to promote a team to become an admin team,
so `main` is a special team.

Concourse requires you to specify at least one user/group to be a member of the `main`
team during deployment.
The list of allowed users, groups, and orgs are managed through the `main_team` property in the ATC job.
For more information about this property, see [main_team](https://bosh.io/jobs/atc?source=github.com/concourse/concourse&version=4.0.0#p%3dmain_team) in the BOSH documentation.

An example of adding a local user to the main team can be found in the `add-local-users.yml` file in the [concourse-bosh-deployment](https://github.com/concourse/concourse-bosh-deployment/blob/master/cluster/operations/add-local-users.yml) GitHub repository.

The values set in the authentication flags take effect whenever the ATC starts up.
This allows Concourse to be deployed against declared configurations.
It also makes sure that members of the `main` team do not get locked out of their Concourse.


## <a id="adding"></a>Add Users and Groups to Teams

<%= partial 'add-users-and-groups' %>

### <a id="add-cf"></a> CF Auth Users, Spaces, and Orgs
Add users, spaces, and org members from a CF deployment to a Concourse team.

* Use `--cf-user=USERNAME` to authorize an individual user.
* Use `--cf-org=ORG-NAME` to authorize an entire org's members.
* Use `--cf-space=ORG-NAME:SPACE-NAME` to authorize the members of a space within an organization.

For example:

<pre class="code">
$ fly set-team -n my-team \
    --cf-user my-username \
    --cf-org my-org \
    --cf-space my-org:my-space
</pre>

<p class="note"><strong>Note:</strong>
  <code>:</code> is used as the separator when adding members from a CF space instead of <code>/</code>. If multiple spaces are added, the flag must be repeated.<br> For example:<br> -\-github-team my-org:my-space 1 <br> -\-github-team my-org:my-space 2
</p>


### <a id="team-config"></a> Team Configuration Details

<%= partial 'team-config' %>

The output is similar to the following:
<pre class="terminal">
<strong>name</strong>     <strong>users</strong>        <strong>groups</strong>
main     cf:User      cf:Organization
</pre>

## <a id="user-roles-and-permissions"></a> Set User Roles and Permissions

Concourse v5.2.0 now has five roles with varying levels of permission.
These are described in the table below:

<table class="nice">
  <th width=20%>Role</th>
  <th>Description</th>
  <tr>
    <td>
      Admin
    </td>
    <td>
      Admin is a special user attribute granted to owners of the main team.
      Admins can administer teams using <code>fly set-team</code>,
      <code>fly destroy-team</code>, and <code>fly rename-team</code>.<br>
      For more information about the main team, see <a href= "#config-main">The Main Team</a>.
    </td>
  </tr>
  <tr>
    <td>
      Team Owner
    </td>
    <td>
      Team owners can read, write, and manage auth capabilities within the scope of their team.<br>
      They cannot rename or destroy the team.
    </td>
  </tr>
  <tr>
    <td>
      Team Member
    </td>
    <td>
      Team members can perform read and write actions within their team.<br>
      They cannot change their team configuration.
    </td>
  </tr>
  <tr>
    <td>
      Pipeline Operator
    </td>
    <td>
      Team pipeline operators can perform pipeline operations such as triggering builds and pinning resources.<br>
      They cannot update pipeline configurations.
    </td>
  </tr>
  <tr>
    <td>
      Viewer
    </td>
    <td>
      Team viewers have read-only access to a team and its pipelines.<br>
      They cannot perform actions such as <code>fly set-pipeline</code> or <code>fly intercept</code>.
    </td>
  </tr>
</table>

For a full list of permissions granted to each user role, see the
[Permission Matrix](https://concourse-ci.org/user-roles.html#permission-matrix)
in the Concourse documentation.

### <a id="setting-user-roles"></a> Set User Roles
By default, the authorization config passed to `set-team` configures the [member role](#member). In addition, Existing
team auth config will be transitioned to the team [owner role](#owner). In other words, anyone that can authenticate
prior to the upgrade will now be authenticated as an owner of their team. This role is the closest equivalent to what
they could do before.

More advanced [roles](#available-user-roles) configuration can be specified through the `--configuration` or `--c` flag.

The `-c` flag expects a YAML file with a single field, `roles:`.
The `roles` field points to a list of role authorization configs.

The attributes in each config will vary by provider. For specifics of your chosen provider, see
[Add Users to Groups and Teams](#adding)

For example, the following config sets three roles with different CF auth configs for each role's provider:
<pre class="code">
roles:
- name: owner
  cf:
    users: ["admin"]
- name: member
  cf:
    orgs: ["my-team"]
- name: viewer
  cf:
    spaces: ["org:my-other-team"]
  local:
    users: ["visitor"]
</pre>
