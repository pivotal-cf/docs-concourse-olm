---
title: Configuring Cloud Foundry Authentication
owner: Concourse
---

<strong><%= modified_date %></strong>

This topic describes how to configure your team's authentication using Cloud Foundry Authentication.

## <a id="overview"></a> Overview
Continuous integration servers often contain many secrets that let them access source code and deploy apps.
It is important that those secrets remain well guarded.
Concourse provides options for both authentication and authorization to give you control over who can access your server and how much they can see.

Any number of the following providers can be enabled at any one time.
Users are given a choice when logging in as to which one they want to use.

<p class="note"><strong>Note:</strong>
If you access your Concourse server over the public internet, then consider using TLS to secure your connection to the web node.
</p>

Configuring team authentication in Concourse is done in two parts:

1. Configure the allowed authentication providers in the deployment manifest.
See [Configure Authentication Providers](#configuring) below.
2. Add users and groups to Concourse teams using `fly set-team`.
See [Add Users and Groups to Teams](#adding) below.


## <a id="configuring"></a> Configure Authentication Providers

<%= partial vars.path_to_partials + '/configure-auth-providers' %>

### <a id="config-cf"></a> Cloud Foundry Authentication

Operators can use Cloud Foundry Authentication (CF Auth) to authenticate users
against a Cloud Foundry deployment, using the User Account and Authentication (UAA) server.

To authenticate users, do the following:

1. Create a client for Concourse in UAA.<br><br>
The callback URL is the external URL of your Concourse server with `/sky/issuer/callback` appended.
For example, the callback URL for Concourse's CI server is `https://ci.concourse-ci.org/sky/issuer/callback`.
<br><br>
The client should look something like this, under `uaa.clients`:

    <pre class="terminal">
    concourse:
      id: MY-CLIENT-ID
      secret: MY-CLIENT-SECRET
      scope: openid,cloud_controller.read
      authorized-grant-types: "authorization_code,refresh_token"
      access-token-validity: 3600
      refresh-token-validity: 3600
      redirect-uri: https://concourse.example.com/sky/issuer/callback
    </pre>


2. Configure the `atc` job in the Concourse manifest with the Cloud Foundry client details:
<ul>
  <li>
    You are given a Client ID and a Client Secret for your new app.
    Supply this information in the `client_id` and `client_secret` fields.
  </li><br>
  <li>Configure your base API URL for CF in the `api_url` field.</li>
</ul>
  For more information about these fields, see
  [cf_auth](https://bosh.io/jobs/web?source=github.com/concourse/concourse-bosh-release&version=5.2.0#p%3dcf_auth.api_url)
  in the BOSH documentation.

### <a id="config-main"></a> The Main Team

<%= partial vars.path_to_partials + '/main-team' %>


## <a id="adding"></a>Add Users and Groups to Teams

<%= partial vars.path_to_partials + '/add-users-and-groups' %>

### <a id="add-cf"></a> CF Auth Users, Spaces, and Orgs
Add users, spaces, and org members from a CF deployment to a Concourse team.

* Use `--cf-user=USERNAME` to authorize an individual user.
* Use `--cf-org=ORG-NAME` to authorize an entire org's members.
* Use `--cf-space=ORG-NAME:SPACE-NAME` to authorize the members of a space within an organization.

For example:

<pre class="code">
$ fly set-team -n my-team \
    --cf-user my-username \
    --cf-org my-org \
    --cf-space my-org:my-space
</pre>

<p class="note"><strong>Note:</strong>
  <code>:</code> is used as the separator when adding members from a CF space instead of <code>/</code>. If multiple spaces are added, the flag must be repeated.<br> For example:<br> -\-github-team my-org:my-space 1 <br> -\-github-team my-org:my-space 2
</p>


### <a id="team-config"></a> Team Configuration Details

<%= partial vars.path_to_partials + '/team-config' %>

The output is similar to the following:
<pre class="terminal">
<strong>name</strong>     <strong>users</strong>        <strong>groups</strong>
main     cf:User      cf:Organization
</pre>

## <a id="user-roles-and-permissions"></a> Set User Roles and Permissions

<%= partial vars.path_to_partials + '/set-user-roles-and-perms' %>
