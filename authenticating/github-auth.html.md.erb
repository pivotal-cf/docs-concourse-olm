---
title: Configuring GitHub Authentication
owner: Concourse
---

<strong><%= modified_date %></strong>

This topic describes how to configure your team's authentication using GitHub Authentication.

## <a id="overview"></a> Overview
Continuous integration servers often contain many secrets that let them access source code and deploy apps.
It is important that those secrets remain well guarded.
Concourse provides options for both authentication and authorization to give you control over who can access your server and how much they can see.

Any number of the following providers can be enabled at any one time.
Users are given a choice when logging in as to which one they want to use.

<p class="note"><strong>Note:</strong>
If you access your Concourse server over the public internet, then consider using TLS to secure your connection to the web node.
</p>

Configuring team authentication in Concourse is done in two parts:

1. Configure the allowed authentication providers in the deployment manifest.
See [Configure Authentication Providers](#configuring) below.
2. Add users and groups to Concourse teams using `fly set-team`.
See [Add Users and Groups to Teams](#adding) below.

## <a id="configuring"></a> Configure Authentication Providers
Concourse can be configured to use local users, GitHub, generic LDAP, Cloud Foundry, OAuth,
and OIDC as authentication providers.
You must specify the allowed authentication providers before Concourse is deployed.

A Concourse operator needs to provide the following information in their Concourse deployment manifest:

* A list of allowed local users
* Configurations against third-party authentication providers (GitHub, generic LDAP, Cloud Foundry, OAuth, and OIDC)
* Users who should be members of the default `main` team (either local users or users/groups from external authentication providers)


### <a id="config-github"></a> GitHub Authentication
A Concourse server can authenticate against GitHub to take advantage of their permission model and other
security improvements in their infrastructure.
To do this, you need to:

1. Create a GitHub app.
2. Configure your deployment with the GitHub client details.


#### Create a GitHub App
You can create an OAuth app on GitHub.
To do this, see [Register a new OAuth app](https://github.com/settings/applications/new) in GitHub.

The callback URL is the external URL of your Concourse server with `/sky/issuer/callback` appended.
For example, Concourse's own CI server's callback URL is `https://ci.concourse-ci.org/sky/issuer/callback`.

<p class="note"><strong>Note: </strong>The app must be created under an org if you want to authorize users
based on org/team membership. If the app is created under a personal account, only individual users can be
authorized.
</p>


#### Configure the GitHub Client Details

GitHub provides a Client ID and a Client Secret for the new app.
Supply this information in the `github_auth`, `client_id`, and `client_secret` fields.
For more information about these fields, see [github_auth](https://bosh.io/jobs/atc?source=github.com/concourse/concourse&version=4.0.0#p%3dgithub_auth) in the BOSH documentation.



### <a id="config-main"></a> The Main Team

<%= partial 'main-team' %>


## <a id="adding"></a>Add Users and Groups to Teams

<%= partial 'add-users-and-groups' %>

### <a id="add-github"></a> GitHub Users, Teams, and Orgs
Add GitHub users, teams, or orgs to a Concourse team.

* Use `--github-user=LOGIN` to authorize an individual user.
* Use `--github-org=ORG-NAME` to authorize an entire org's members.
* Use `--github-team=ORG-NAME:TEAM-NAME` to authorize a team's members within an organization.

For example:
<pre class="code">
$ fly set-team -n my-team \
    --github-user my-github-login \
    --github-org my-org \
    --github-team my-org:my-team 1
</pre>

<p class="note"><strong>Note:</strong>
  <code>:</code> is used as the separator when adding GitHub teams instead of <code>/</code>. If multiple teams are added, the flag must be repeated.<br> For example:<br><code>-\-github-team my-org:my-team 1</code> <br><code>-\-github-team my-org:my-team 2</code>
</p>


### <a id="team-config"></a> Team Configuration Details

<%= partial 'team-config' %>

## <a id="user-roles-and-permissions"></a> Set User Roles and Permissions

Concourse v5.2.0 now has five roles with varying levels of permission.
These are described in the table below:

<table class="nice">
  <th width=20%>Role</th>
  <th>Description</th>
  <tr>
    <td>
      Admin
    </td>
    <td>
      Admin is a special user attribute granted to owners of the main team.
      Admins can administer teams using <code>fly set-team</code>,
      <code>fly destroy-team</code>, and <code>fly rename-team</code>.<br>
      For more information about the main team, see <a href= "#config-main">The Main Team</a>.
    </td>
  </tr>
  <tr>
    <td>
      Team Owner
    </td>
    <td>
      Team owners can read, write, and manage auth capabilities within the scope of their team.<br>
      They cannot rename or destroy the team.
    </td>
  </tr>
  <tr>
    <td>
      Team Member
    </td>
    <td>
      Team members can perform read and write actions within their team.<br>
      They cannot change their team configuration.
    </td>
  </tr>
  <tr>
    <td>
      Pipeline Operator
    </td>
    <td>
      Team pipeline operators can perform pipeline operations such as triggering builds and pinning resources.<br>
      They cannot update pipeline configurations.
    </td>
  </tr>
  <tr>
    <td>
      Viewer
    </td>
    <td>
      Team viewers have read-only access to a team and its pipelines.<br>
      They cannot perform actions such as <code>fly set-pipeline</code> or <code>fly intercept</code>.
    </td>
  </tr>
</table>

For a full list of permissions granted to each user role, see the
[Permission Matrix](https://concourse-ci.org/user-roles.html#permission-matrix)
in the Concourse documentation.

### <a id="setting-user-roles"></a> Set User Roles
By default, the authorization config passed to `set-team` configures the [member role](#member). In addition, Existing
team auth config will be transitioned to the team [owner role](#owner). In other words, anyone that can authenticate
prior to the upgrade will now be authenticated as an owner of their team. This role is the closest equivalent to what
they could do before.

More advanced [roles](#available-user-roles) configuration can be specified through the `--configuration` or `--c` flag.

The `-c` flag expects a YAML file with a single field, `roles:`.
The `roles` field points to a list of role authorization configs.

The attributes in each config will vary by provider. For specifics of your chosen provider, see
[Add Users to Groups and Teams](#adding)

For example, the following config sets three roles with different Github auth configs for each role's provider:
<pre class="code">
roles:
- name: owner
  github:
    users: ["admin"]
- name: member
  github:
    teams: ["org:team"]
- name: viewer
  github:
    orgs: ["org"]
  local:
    users: ["visitor"]
</pre>
